<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="File_Max_Record_Count_Validation_Message" xml:space="preserve">
    <value>File must contain between one and {0} ROMMs</value>
  </data>
  <data name="File_Name_Length_Validation_Message" xml:space="preserve">
    <value>File name must have no more than {0} characters</value>
  </data>
  <data name="File_Size_Kb_Text_Template" xml:space="preserve">
    <value>1KB</value>
  </data>
  <data name="File_Size_Too_Large_Validation_Message" xml:space="preserve">
    <value>File size too large – must be no more than {0}MB</value>
  </data>
  <data name="File_Type_CSV" xml:space="preserve">
    <value>CSV</value>
  </data>
  <data name="Heading_Before_You_Start" xml:space="preserve">
    <value>Before you start</value>
  </data>
  <data name="Js_Disabled_Upload_File_Button_Text" xml:space="preserve">
    <value>Upload (only click once)</value>
  </data>
  <data name="Js_Disabled_Upload_File_Help_Text" xml:space="preserve">
    <value>JavaScript is disabled so you will not see the upload progress icon after you press Submit. Processing the file can take up to 10 seconds depending on the file size.</value>
  </data>
  <data name="Link_Tlevels_Romms_Data_Template" xml:space="preserve">
    <value>Download T Levels multiple ROMMs data template ({0}, {1})</value>
  </data>
  <data name="List_Core_Code_Different" xml:space="preserve">
    <value>the core code is different - you cannot change the core code here</value>
  </data>
  <data name="List_Data_Not_Formatted_Correctly" xml:space="preserve">
    <value>If the data is not correctly formatted, nothing will be uploaded. You will be able to download an error report that tells you what's wrong.</value>
  </data>
  <data name="List_If_Uln_Already_Active" xml:space="preserve">
    <value>If a ULN already has an active registration, we will update the data, unless:</value>
  </data>
  <data name="List_If_Uln_Already_Exist" xml:space="preserve">
    <value>If a unique learner number (ULN) doesn't already exist in our service, we will add a new registration.</value>
  </data>
  <data name="List_Romm_Active_With_Another_Ao" xml:space="preserve">
    <value>the withdrawal is active with another awarding organisation</value>
  </data>
  <data name="Must_Be_Csv_Validation_Message" xml:space="preserve">
    <value>The selected file must be a CSV</value>
  </data>
  <data name="Page_Heading" xml:space="preserve">
    <value>Upload multiple ROMMs</value>
  </data>
  <data name="Page_Title" xml:space="preserve">
    <value>Upload multiple ROMMs</value>
  </data>
  <data name="Para_You_Can_Open_ROMMs" xml:space="preserve">
    <value>You can open ROMMs for one of more learners by uploading a CSV file.</value>
  </data>
  <data name="Select_File_To_Upload_Required_Validation_Message" xml:space="preserve">
    <value>Select a file to upload</value>
  </data>
  <data name="Upload_File_Button_Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="Upload_File_Text" xml:space="preserve">
    <value>Upload a file</value>
  </data>
  <data name="Upload_Processing_Spinner_Text" xml:space="preserve">
    <value>Processing, please wait. This could take up to 10 seconds. Do not refresh.</value>
  </data>
  <data name="Romms_Template_Published_On" xml:space="preserve">
    <value>Published 25 September 2024</value>
  </data>
  <data name="Romms_Version" xml:space="preserve">
    <value>Version 1.0</value>
  </data>
  <data name="Para_Guidance_And_Download_The_Template_To_Help_You" xml:space="preserve">
    <value>guidance and download the template to help you. Once you have added your ROMM details to the template, you can upload your file.</value>
  </data>
  <data name="Para_If_You_Export_Data_Check_The_Data_Is_In_The_Right_Format" xml:space="preserve">
    <value>If you export data from another system, you must check the data is in the right format.</value>
  </data>
  <data name="Para_See_The" xml:space="preserve">
    <value>See the</value>
  </data>
  <data name="Tlevel_Data_Format_And_Rules" xml:space="preserve">
    <value>T Level data format and rules</value>
  </data>
</root>