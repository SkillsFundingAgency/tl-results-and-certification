{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "environmentNameAbbreviation": {
            "type": "string"
        },
        "sqlServerAdminUsername": {
            "type": "string"
        },
        "sqlServerAdminPassword": {
            "type": "securestring"
        },
        "sqlServerReplicaAdminPassword": {
            "type": "securestring"
        },
        "sqlServerActiveDirectoryAdminLogin": {
            "type": "string"
        },
        "sqlServerActiveDirectoryAdminObjectId": {
            "type": "string"
        },
        "threatDetectionEmailAddress": {
            "type": "string"
        },
        "appServicePlanTier": {
            "type": "string",
            "allowedValues": [
                "Standard",
                "Premium",
                "PremiumV2"
            ]
        },
        "appServicePlanSize": {
            "type": "string",
            "allowedValues": [
                "1",
                "2",
                "3"
            ]
        },
        "appServicePlanInstances": {
            "type": "int",
            "minValue": 1
        },
        "azureWebsitesRPObjectId": {
            "type": "string"
        },
        "keyVaultReadWriteObjectIds": {
            "type": "array"
        },
        "keyVaultFullAccessObjectIds": {
            "type": "array"
        },
        "redisCacheSku": {
            "type": "object",
            "defaultValue": {
                "name": "Basic",
                "family": "C",
                "capacity": 0
            },
            "metadata": {
                "description": ""
            }
        },
        "sqlFirewallIpAddressesPredefined": {
            "type": "array"
        },
        "enableReplica": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enables the replica database to be deployed"
            }
        },
        "isStorageSecondaryKeyInUse": {
            "type": "bool",
            "allowedValues": [ true, false ]
        },
        "environmentPrefix": {
            "type": "string"
        }
    },
    "variables": {
        "deploymentUrlBase": "https://raw.githubusercontent.com/SkillsFundingAgency/tl-platform-building-blocks/feature/TLD-587-disable-sql-public-access/ArmTemplates/",
        "resourceNamePrefix": "[toLower(parameters('environmentNameAbbreviation'))]",
        "sqlServerName": "[concat(variables('resourceNamePrefix'), '-shared-sql')]",
        "sqlServerReplicaName": "[concat(variables('resourceNamePrefix'), '-shared-sql-replica')]",
        "sqlServerNames": "[if(equals(parameters('enableReplica'), true()), createArray(variables('sqlServerName'), variables('sqlServerReplicaName')), createArray(variables('sqlServerName')))]",
        "sharedStorageAccountName": "[replace(concat(variables('resourceNamePrefix'), 'sharedstr'), '-', '')]",
        "appServicePlanName": "[concat(variables('resourceNamePrefix'), '-shared-asp')]",
        "configStorageAccountName": "[replace(concat(variables('resourceNamePrefix'), 'configstr'), '-', '')]",
        "keyVaultName": "[replace(concat(variables('resourceNamePrefix'), 'sharedkv'), '-', '')]",
        "redisCacheName": "[concat(variables('resourceNamePrefix'),'-redis')]",
        "entraReaderUserIdentityResourceId": "[resourceId(concat (parameters('environmentPrefix'), '-core'), 'Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('environmentPrefix'), '-id-tlevels-01'))]",
        "keyVaultAccessPolicies": [
            {
                "objectId": "[parameters('azureWebsitesRPObjectId')]",
                "tenantId": "[subscription().tenantId]",
                "permissions": {
                    "secrets": [
                        "Get"
                    ]
                }
            }
        ],
        "readWriteAccessPolicies": {
            "copy": [
                {
                    "name": "readWriteAccessPolicies",
                    "count": "[length(parameters('keyVaultReadWriteObjectIds'))]",
                    "input": {
                        "objectId": "[parameters('keyVaultReadWriteObjectIds')[copyIndex('readWriteAccessPolicies')]]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": {
                            "secrets": [
                                "Get",
                                "List",
                                "Set"
                            ]
                        }
                    }
                }
            ]
        },
        "fullAccessPolicies": {
            "copy": [
                {
                    "name": "fullAccessPolicies",
                    "count": "[length(parameters('keyVaultFullAccessObjectIds'))]",
                    "input": {
                        "objectId": "[parameters('keyVaultFullAccessObjectIds')[copyIndex('fullAccessPolicies')]]",
                        "tenantId": "[subscription().tenantId]",
                        "permissions": {
                            "keys": [
                                "Get",
                                "List",
                                "Update",
                                "Create",
                                "Import",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore"
                            ],
                            "secrets": [
                                "Get",
                                "List",
                                "Set",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore"
                            ],
                            "certificates": [
                                "Get",
                                "List",
                                "Update",
                                "Create",
                                "Import",
                                "Delete",
                                "Recover",
                                "Backup",
                                "Restore",
                                "ManageContacts",
                                "ManageIssuers",
                                "GetIssuers",
                                "ListIssuers",
                                "SetIssuers",
                                "DeleteIssuers"
                            ]
                        }
                    }
                }
            ]
        }

    },
    "resources": [
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('shared-storage-account','-', parameters('environmentNameAbbreviation'))]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'storage-account-arm.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountName": {
                        "value": "[variables('sharedStorageAccountName')]"
                    },
                    "storageKind": {
                        "value": "StorageV2"
                    },
                    "minimumTlsVersion": {
                        "value": "TLS1_2"
                    }
                }
            }
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('sql-server','-', parameters('environmentNameAbbreviation'))]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'sql-server.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerName": {
                        "value": "[variables('sqlServerName')]"
                    },
                    "sqlServerAdminUserName": {
                        "value": "[parameters('sqlServerAdminUsername')]"
                    },
                    "sqlServerAdminPassword": {
                        "value": "[parameters('sqlServerAdminPassword')]"
                    },
                    "sqlServerActiveDirectoryAdminLogin": {
                        "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
                    },
                    "sqlServerActiveDirectoryAdminObjectId": {
                        "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
                    },
                    "threatDetectionEmailAddress": {
                        "value": "[parameters('threatDetectionEmailAddress')]"
                    },
                    "sqlStorageAccountName": {
                        "value": "[variables('sharedStorageAccountName')]"
                    },
                    "isStorageSecondaryKeyInUse": {
                        "value": "[parameters('isStorageSecondaryKeyInUse')]"
                    },
                    "isManagedIdentityInUse": {
                        "value": true
                    },
                    "identityType": {
                        "value": "UserAssigned"
                    },
                    "entraReaderUmiResourceId": {
                        "value": "[variables('entraReaderUserIdentityResourceId')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('shared-storage-account','-', parameters('environmentNameAbbreviation'))]"
            ]
        },
        {
            "condition": "[equals(parameters('enableReplica'), true())]",
            "apiVersion": "2017-05-10",
            "name": "[concat('sql-server','-', parameters('environmentNameAbbreviation'),'-replica')]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'sql-server.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlServerName": {
                        "value": "[variables('sqlServerReplicaName')]"
                    },
                    "sqlServerAdminUserName": {
                        "value": "[parameters('sqlServerAdminUsername')]"
                    },
                    "sqlServerAdminPassword": {
                        "value": "[parameters('sqlServerReplicaAdminPassword')]"
                    },
                    "sqlServerActiveDirectoryAdminLogin": {
                        "value": "[parameters('sqlServerActiveDirectoryAdminLogin')]"
                    },
                    "sqlServerActiveDirectoryAdminObjectId": {
                        "value": "[parameters('sqlServerActiveDirectoryAdminObjectId')]"
                    },
                    "threatDetectionEmailAddress": {
                        "value": "[parameters('threatDetectionEmailAddress')]"
                    },
                    "sqlStorageAccountName": {
                        "value": "[variables('sharedStorageAccountName')]"
                    },
                    "isStorageSecondaryKeyInUse": {
                        "value": "[parameters('isStorageSecondaryKeyInUse')]"
                    },
                    "isManagedIdentityInUse": {
                        "value": true
                    },
                    "identityType": {
                        "value": "UserAssigned"
                    },
                    "entraReaderUmiResourceId": {
                        "value": "[variables('entraReaderUserIdentityResourceId')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('shared-storage-account','-', parameters('environmentNameAbbreviation'))]"
            ]
        },
        {
            "apiVersion": "2022-09-01",
            "name": "[concat('key-vault-secret-',parameters('environmentNameAbbreviation'), '-admin-username', copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'keyvault-secret.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('keyVaultName')]"
                    },
                    "secretName": {
                        "value": "[concat(variables('sqlServerNames')[copyIndex()],'-admin-username')]"
                    },
                    "secretValue": {
                        "value": "[parameters('sqlServerAdminUserName')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('key-vault','-', parameters('environmentNameAbbreviation'))]"
            ],
            "copy": {
                "count": "[length(variables('sqlServerNames'))]",
                "name": "firewallrulecopy",
                "mode": "Parallel"
            }
        },
        {
            "apiVersion": "2022-09-01",
            "name": "[concat('key-vault-secret-',parameters('environmentNameAbbreviation'), '-admin-password', copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'), 'keyvault-secret.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('keyVaultName')]"
                    },
                    "secretName": {
                        "value": "[concat(variables('sqlServerNames')[copyIndex()],'-admin-password')]"
                    },
                    "secretValue": {
                        "value": "[parameters('sqlServerAdminPassword')]"
                    }
                }
            },
            "dependsOn": [
                "[concat('key-vault','-', parameters('environmentNameAbbreviation'))]"
            ],
            "copy": {
                "count": "[length(variables('sqlServerNames'))]",
                "name": "firewallrulecopy",
                "mode": "Parallel"
            }
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('app-service-plan','-', parameters('environmentNameAbbreviation'))]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'app-service-plan.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "appServicePlanName": {
                        "value": "[variables('appServicePlanName')]"
                    },
                    "nonASETier": {
                        "value": "[parameters('appServicePlanTier')]"
                    },
                    "aspSize": {
                        "value": "[parameters('appServicePlanSize')]"
                    },
                    "aspInstances": {
                        "value": "[parameters('appServicePlanInstances')]"
                    }
                }
            }
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('config-storage-account','-', parameters('environmentNameAbbreviation'))]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'storage-account-arm.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "storageAccountName": {
                        "value": "[variables('configStorageAccountName')]"
                    },
                    "storageKind": {
                        "value": "StorageV2"
                    },
                    "minimumTlsVersion": {
                        "value": "TLS1_2"
                    }
                }
            }
        },
        {
            "apiVersion": "2017-05-10",
            "name": "[concat('key-vault','-', parameters('environmentNameAbbreviation'))]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'keyvault.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "keyVaultName": {
                        "value": "[variables('keyVaultName')]"
                    },
                    "enabledForTemplateDeployment": {
                        "value": true
                    },
                    "keyVaultAccessPolicies": {
                        "value": "[concat(variables('keyVaultAccessPolicies'), variables('readWriteAccessPolicies').readWriteAccessPolicies, variables('fullAccessPolicies').fullAccessPolicies)]"
                    }
                }
            }
        },

        {
            "type": "Microsoft.Cache/Redis",
            "name": "[variables('redisCacheName')]",
            "apiVersion": "2019-07-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "sku": "[parameters('redisCacheSku')]",
                "enableNonSslPort": false,
                "minimumTlsVersion": "1.2"
            }
        },
        {
            "apiVersion": "2020-10-01",
            "name": "[concat('sql-server-firewall-rules','-', parameters('environmentNameAbbreviation'), copyIndex())]",
            "type": "Microsoft.Resources/deployments",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('deploymentUrlBase'),'sql-server-firewall-rules.json')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "sqlFirewallIpAddressesPredefined": {
                        "value": "[parameters('sqlFirewallIpAddressesPredefined')]"
                    },
                    "serverName": {
                        "value": "[variables('sqlServerNames')[copyIndex()]]"
                    }
                }
            },
            "dependsOn": [
                "[concat('sql-server','-', parameters('environmentNameAbbreviation'))]",
                "[concat('sql-server','-', parameters('environmentNameAbbreviation'),'-replica')]"
            ],
            "copy": {
                "count": "[length(variables('sqlServerNames'))]",
                "name": "firewallrulecopy",
                "mode": "Parallel"
            }
        }
    ],
    "outputs": {
        "sharedASPName": {
            "type": "string",
            "value": "[variables('appServicePlanName')]"
        },
        "sharedKeyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]"
        },
        "sharedKeyVaultUri": {
            "type": "string",
            "value": "[reference(concat('key-vault','-', parameters('environmentNameAbbreviation'))).outputs.keyVaultUri.value]"
        },
        "sharedSQLServerName": {
            "type": "string",
            "value": "[variables('sqlServerName')]"
        },
        "sharedSQLServerReplicaName": {
            "type": "string",
            "value": "[variables('sqlServerReplicaName')]"
        },
        "sharedStorageConnectionString": {
            "type": "string",
            "value": "[reference(concat('shared-storage-account','-', parameters('environmentNameAbbreviation'))).outputs.storageConnectionStringKey2.value]"
        },
        "configStorageConnectionString": {
            "type": "string",
            "value": "[reference(concat('config-storage-account','-', parameters('environmentNameAbbreviation'))).outputs.storageConnectionStringKey2.value]"
        },
        "ConfigStorageAccountName": {
            "type": "string",
            "value": "[variables('configStorageAccountName')]"
        },
        "RedisConnectionString": {
            "type": "string",
            "value": "[concat(variables('redisCacheName'), '.redis.cache.windows.net:6380,password=',listKeys(resourceId('Microsoft.Cache/Redis', variables('redisCacheName')), '2016-04-01').primaryKey ,',ssl=True,abortConnect=False')]"
        },
        "EntraReaderUserIdentityResourceId":{
            "type": "string",
            "value": "[variables('entraReaderUserIdentityResourceId')]"
        },
        "SqlUserIdentityResourceId": {
            "type": "string",
            "value": "[reference(concat('sql-server','-', parameters('environmentNameAbbreviation'))).outputs.sqlUserIdentityResourceId.value]"
        }

    }
}