parameters:
  - name: BaseName
    type: string
  - name: serviceConnection
    type: string
  - name: sharedEnvironmentId
    type: string
  - name: environmentName
    type: string
jobs:
  - job: DeployInfrastructure
    variables:
      SharedASPName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedASPName'] ]
      SharedKeyVaultName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedKeyVaultName'] ]
      SharedSQLServerName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedSQLServerName'] ]
      SharedSQLServerReplicaName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.sharedSQLServerReplicaName'] ]
      ConfigurationStorageConnectionString: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.configStorageConnectionString'] ]
      ConfigStorageAccountName: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.ConfigStorageAccountName'] ]
      SharedResourceGroup: $[stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.SharedVariables.SharedResourceGroup']]
      EntraReaderUserIdentityResourceId: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.EntraReaderUserIdentityResourceId'] ]
      SqlUserIdentityResourceId: $[ stageDependencies.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.outputs['DeploySharedInfrastructure_${{parameters.sharedEnvironmentId}}.armOutputs.armOutput.SqlUserIdentityResourceId'] ]

    steps:
      - checkout: self
      - checkout: devopsTools
    
      - task: AzureCLI@2
        displayName: 'Fetch Internal API IP Security Restrictions'
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'ScriptPath'
          ScriptPath: ./operations-devops-tools/Powershell/AppServiceRestrictions/FetchIpSecurityRestrictions.ps1
          ScriptArguments: '-resourceGroupName $(BaseName) -appServiceName $(InternalAPIAppServiceName)'
          azurePowerShellVersion: 'LatestVersion'

      - task: AzureCLI@2
        displayName: Create temporary SQL firewall rule to allow Azure service connections
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: 'az sql server firewall-rule create -g $(SharedResourceGroup) -s $(SharedSQLServerName) -n "allowAllAzure" --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0'

      - template: ./Infrastructure/steps/deploy-template.yml@devopsTemplates
        parameters:
          serviceConnection: ${{ parameters.serviceConnection }}
          subscriptionId: $(subscriptionId)
          resourceGroupName: $(ResourceGroupName)
          location: "West Europe"
          templateFilePath: "./tl-results-and-certification/azure/tlevels-environment.json"
          armParameterOverrideString:
            '-environmentNameAbbreviation "${{parameters.environmentName}}"
            -resourceNamePrefix "${{parameters.BaseName}}"
            -sharedASPName "$(SharedASPName)"
            -sharedEnvResourceGroup "$(SharedResourceGroup)"
            -sharedKeyVaultName "$(SharedKeyVaultName)"
            -sharedSQLServerName "$(SharedSQLServerName)"
            -sharedSQLServerReplicaName "$(SharedSQLServerReplicaName)"
            -sqlDatabaseSkuName "$(SQLDatabaseSkuName)"
            -sqlDatabaseTier "$(SQLDatabaseTier)"
            -sqlserverlessAutoPauseDelay "$(SQLServerlessAutoPauseDelay)"
            -configurationStorageConnectionString "$(ConfigurationStorageConnectionString)"
            -configStorageAccountName "$(ConfigStorageAccountName)"
            -uiCustomHostName "$(UICustomHostName)"
            -uiCertificateName "$(CertificateName)"
            -storageAccountContainerArray "$(storageAccountContainerArray)"
            -learnerVerificationAndLearningEventsTrigger "$(LearnerVerificationAndLearningEventsTrigger)"
            -learnerGenderTrigger "$(learnerGenderTrigger)"
            -certificatePrintingBatchesCreateTrigger "$(certificatePrintingBatchesCreateTrigger)"
            -certificatePrintingRequestTrigger "$(certificatePrintingRequestTrigger)"
            -certificatePrintingBatchSummaryTrigger "$(certificatePrintingBatchSummaryTrigger)"
            -certificatePrintingTrackBatchTrigger "$(certificatePrintingTrackBatchTrigger)"
            -ucasTransferEntriesTrigger "$(ucasTransferEntriesTrigger)"
            -ucasTransferResultsTrigger "$(ucasTransferResultsTrigger)"
            -ucasTransferAmendmentsTrigger "$(ucasTransferAmendmentsTrigger)"
            -overallResultCalculationTrigger "$(overallResultCalculationTrigger)"
            -industryPlacementExtractTrigger "$(industryPlacementExtractTrigger)"
            -industryPlacementProviderFirstDeadlineReminderTrigger "$(industryPlacementProviderFirstDeadlineReminderTrigger)"
            -industryPlacementMissedDeadlineReminderTrigger "$(industryPlacementMissedDeadlineReminderTrigger)"
            -industryPlacementChaseBigGapsReminderTrigger "$(industryPlacementChaseBigGapsReminderTrigger)"
            -industryPlacementOneOutstandingUlnReminderTrigger "$(industryPlacementOneOutstandingUlnReminderTrigger)"
            -analystOverallResultExtractTrigger "$(analystOverallResultExtractTrigger)"
            -coreRommExtractTrigger "$(coreRommExtractTrigger)"
            -specialismRommExtractTrigger "$(specialismRommExtractTrigger)"
            -providerAddressExtractTrigger "$(providerAddressExtractTrigger)"
            -certificateTrackingExtractTrigger "$(CertificateTrackingExtractTrigger)"
            -enableReplica $(enableReplica)
            -containerLifecyclePolicyRules $(containerLifecyclePolicyRules)
            -ipSecurityRestrictions $(ipSecurityRestrictions)
            -internalApiIpSecurityRestrictions $(internalApiIpSecurityRestrictions)'
          tags: $(Tags) 
          processOutputs: true
      
      - task: AzureCLI@2
        displayName: 'Add function access to Keyvault'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: |
            $functionAppObjectId = az functionapp identity show -n $(armOutputs.armOutput.functionAppName) -g $(ResourceGroupName) --query "principalId"
            Write-Host $functionAppObjectId
            az keyvault set-policy --name $(SharedKeyVaultName) --object-id $functionAppObjectId --secret-permissions "get" --key-permissions "get" --certificate-permissions "get"

      - task: AzureCLI@2
        displayName: 'Create Internal Api SQL Users and Permissions'
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'ScriptPath'
          ScriptPath: ./operations-devops-tools/Powershell/CreateAppSQLUser/executeCreateAppSQLUser.ps1
          ScriptArguments: '-UserName "$(armOutputs.armOutput.internalApiAppName)" -ObjectID "$(armOutputs.armOutput.internalApiManagedServiceIdentityId)" -sqlServerName $(SharedSQLServerName) -sqlDatabaseName "$(armOutputs.armOutput.sqlDatabaseName)" -sqlServerResourceGroup $(SharedResourceGroup) -EntraReaderUserIdentityResourceId $(EntraReaderUserIdentityResourceId) -sqlUserIdentityResourceId $(sqlUserIdentityResourceId)'
          azurePowerShellVersion: 'LatestVersion'
          failOnStandardError: true

      - task: AzureCLI@2
        displayName: 'Create Function Ap SQL Users and Permissions'
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'ScriptPath'
          ScriptPath: ./operations-devops-tools/Powershell/CreateAppSQLUser/executeCreateAppSQLUser.ps1
          ScriptArguments: '-UserName "$(armOutputs.armOutput.functionAppName)" -ObjectID "$(armOutputs.armOutput.functionAppManagedServiceIdentityId)" -sqlServerName $(SharedSQLServerName) -sqlDatabaseName "$(armOutputs.armOutput.sqlDatabaseName)" -sqlServerResourceGroup $(SharedResourceGroup) -EntraReaderUserIdentityResourceId $(EntraReaderUserIdentityResourceId) -sqlUserIdentityResourceId $(sqlUserIdentityResourceId)'
          azurePowerShellVersion: 'LatestVersion'
          failOnStandardError: true

      - task: AzureCLI@2
        displayName: Remove temporary SQL firewall rule to allow Azure service connections
        inputs:
          azureSubscription: ${{parameters.serviceConnection}}
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: 'az sql server firewall-rule delete -g $(SharedResourceGroup) -s $(SharedSQLServerName) -n "allowAllAzure"'

      - task: AzurePowerShell@5
        displayName: 'Set Certificate Policy'
        inputs:
          azureSubscription: ${{ parameters.serviceConnection }}
          ScriptType: InlineScript
          Inline: | 
            Set-AzKeyVaultCertificatePolicy -VaultName $(SharedKeyVaultName) -Name $(CertificateName) -RenewAtNumberOfDaysBeforeExpiry 30
          azurePowerShellVersion: LatestVersion
